--- ./ckanext/portalopendatadk/actions.py	(original)
+++ ./ckanext/portalopendatadk/actions.py	(refactored)
@@ -73,7 +73,7 @@
                 'notes': translation_notes_output,
             }
 
-            for name, translation_output in translation_outputs.items():
+            for name, translation_output in list(translation_outputs.items()):
                 if translation_output.startswith('\n\n'):
                     translation_outputs[name] = translation_output[2:]
 
@@ -98,13 +98,13 @@
     existing_notes_translations = data_dict.get('notes_translated')
 
     if existing_title_translations:
-        for lang, translation in existing_title_translations.items():
+        for lang, translation in list(existing_title_translations.items()):
             data_dict['title_translated'][lang] = data_dict[
                 'title_translated-{}'.format(lang)
             ]
 
     if existing_notes_translations:
-        for lang, translation in existing_notes_translations.items():
+        for lang, translation in list(existing_notes_translations.items()):
             data_dict['notes_translated'][lang] = data_dict[
                 'notes_translated-{}'.format(lang)
             ]
@@ -628,7 +628,7 @@
     # Move ext_ params to extras and remove them from the root of the search
     # params, so they don't cause and error
     data_dict['extras'] = data_dict.get('extras', {})
-    for key in [key for key in data_dict.keys() if key.startswith('ext_')]:
+    for key in [key for key in list(data_dict.keys()) if key.startswith('ext_')]:
         data_dict['extras'][key] = data_dict.pop(key)
 
     # check if some extension needs to modify the search params
@@ -726,7 +726,7 @@
     # organizations in the current search's facets.
     group_names = []
     for field_name in ('groups', 'organization'):
-        group_names.extend(facets.get(field_name, {}).keys())
+        group_names.extend(list(facets.get(field_name, {}).keys()))
 
     groups = (
         session.query(model.Group.name, model.Group.title)
@@ -739,9 +739,9 @@
 
     # Transform facets into a more useful data structure.
     restructured_facets = {}
-    for key, value in facets.items():
+    for key, value in list(facets.items()):
         restructured_facets[key] = {'title': key, 'items': []}
-        for key_, value_ in value.items():
+        for key_, value_ in list(value.items()):
             new_facet_dict = {}
             new_facet_dict['name'] = key_
             if key in ('groups', 'organization'):
--- ./ckanext/portalopendatadk/controller.py	(original)
+++ ./ckanext/portalopendatadk/controller.py	(refactored)
@@ -111,10 +111,10 @@
             user = get_action('user_create')(context, data_dict)
         except NotAuthorized:
             abort(403, _('Unauthorized to create user %s') % '')
-        except NotFound, e:
+        except NotFound as e:
             abort(404, _('User not found'))
         except DataError:
-            abort(400, _(u'Integrity Error'))
+            abort(400, _('Integrity Error'))
 
         # NOTE: On ODDK, we don't need a captcha as there's
         # no public registration.
@@ -124,7 +124,7 @@
         #     h.flash_error(error_msg)
         #     return self.new(data_dict)
 
-        except ValidationError, e:
+        except ValidationError as e:
             errors = e.error_dict
             error_summary = e.error_summary
             return self.new(data_dict, errors, error_summary)
@@ -214,9 +214,9 @@
             if user_obj:
                 try:
                     mailer.send_reset_link(user_obj)
-                except mailer.MailerException, e:
+                except mailer.MailerException as e:
                     h.flash_error(_('Could not send reset link: %s') %
-                                  unicode(e))
+                                  str(e))
 
             h.flash_success(
                 _('A reset link has been emailed to you '
@@ -233,7 +233,7 @@
     """
     pkg = model.Package.get(id)
     if pkg:
-        return pkg.type or u'dataset'
+        return pkg.type or 'dataset'
     return None
 
 
@@ -325,7 +325,7 @@
         try:
             datasets = toolkit.get_action('dcat_datasets_list')({},
                                                                 data_dict)
-        except toolkit.ValidationError, e:
+        except toolkit.ValidationError as e:
             toolkit.abort(409, str(e))
 
         content = json.dumps(datasets)
--- ./ckanext/portalopendatadk/dcat_profile.py	(original)
+++ ./ckanext/portalopendatadk/dcat_profile.py	(refactored)
@@ -221,7 +221,7 @@
 
         # Dataset URI (explicitly show the missing ones)
         dataset_uri = (
-            unicode(dataset_ref) if isinstance(dataset_ref, rdflib.term.URIRef) else ""
+            str(dataset_ref) if isinstance(dataset_ref, rdflib.term.URIRef) else ""
         )
         dataset_dict["extras"].append({"key": "uri", "value": dataset_uri})
 
@@ -300,7 +300,7 @@
 
             # Distribution URI (explicitly show the missing ones)
             resource_dict["uri"] = (
-                unicode(distribution)
+                str(distribution)
                 if isinstance(distribution, rdflib.term.URIRef)
                 else ""
             )
@@ -327,7 +327,7 @@
     def graph_from_dataset(self, dataset_dict, dataset_ref):
         g = self.g
 
-        for prefix, namespace in namespaces.iteritems():
+        for prefix, namespace in namespaces.items():
             g.bind(prefix, namespace)
 
         g.add((dataset_ref, RDF.type, DCAT.Dataset))
@@ -353,14 +353,14 @@
 
         # Only add 'da' as language for now
         if translated_titles:
-            for lang, title in translated_titles.iteritems():
+            for lang, title in translated_titles.items():
                 if lang == "da":
                     title = title.strip()
                     if title:
                         g.add((dataset_ref, DCT.title, Literal(title, lang=lang)))
 
         if translated_descriptions:
-            for lang, description in translated_descriptions.iteritems():
+            for lang, description in translated_descriptions.items():
                 if lang == "da":
                     description = description.strip()
                     if description:
@@ -742,7 +742,7 @@
                     "CC-BY-NC-4.0": "CC_BYNC_4_0",
                 }
                 skos_licenses.update(
-                    {v: v for v in LICENSES.keys() if v not in skos_licenses}
+                    {v: v for v in list(LICENSES.keys()) if v not in skos_licenses}
                 )
 
                 if license_id and license_id in skos_licenses:
@@ -907,7 +907,7 @@
             "ckanext.portalopendatadk.frontend_site_url", config.get("ckan.site_url")
         )
 
-        for prefix, namespace in namespaces.iteritems():
+        for prefix, namespace in namespaces.items():
             g.bind(prefix, namespace)
 
         g.add((catalog_ref, RDF.type, DCAT.Catalog))
--- ./ckanext/portalopendatadk/helpers.py	(original)
+++ ./ckanext/portalopendatadk/helpers.py	(refactored)
@@ -109,7 +109,7 @@
         if isinstance(data_themes_raw, list):
             data_themes_raw = data_themes_raw[0]
 
-        if isinstance(data_themes_raw, (str, unicode)):
+        if isinstance(data_themes_raw, str):
             data_themes = data_themes_raw.strip("{}").split(",")
 
     return data_themes
--- ./ckanext/portalopendatadk/plugin.py	(original)
+++ ./ckanext/portalopendatadk/plugin.py	(refactored)
@@ -257,7 +257,7 @@
         custom_user_password_validator,
         toolkit.get_validator('user_password_not_empty'),
         toolkit.get_validator('ignore_missing'),
-        unicode,
+        str,
     ]
 
     if form_schema:
@@ -265,9 +265,9 @@
             toolkit.get_validator('user_both_passwords_entered'),
             custom_user_password_validator,
             toolkit.get_validator('user_passwords_match'),
-            unicode,
+            str,
         ]
-        schema['password2'] = [unicode]
+        schema['password2'] = [str]
 
     return schema
 
@@ -279,7 +279,7 @@
         custom_user_password_validator,
         toolkit.get_validator('user_password_not_empty'),
         toolkit.get_validator('ignore_missing'),
-        unicode,
+        str,
     ]
 
     if form_schema:
@@ -288,9 +288,9 @@
             toolkit.get_validator('ignore_missing'),
             custom_user_password_validator,
             toolkit.get_validator('user_passwords_match'),
-            unicode,
+            str,
         ]
-        schema['password2'] = [toolkit.get_validator('ignore_missing'), unicode]
+        schema['password2'] = [toolkit.get_validator('ignore_missing'), str]
 
     return schema
 
@@ -310,7 +310,7 @@
 
     if isinstance(value, Missing):
         pass
-    elif not isinstance(value, basestring):
+    elif not isinstance(value, str):
         errors[('password',)].append(_('Passwords must be strings'))
     elif value == '':
         pass
